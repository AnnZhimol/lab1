РАЗРАБОТКА МОДЕЛЕЙ ИНТЕРФЕЙСОВ И
ПОВЕДЕНИЯ ВИРТУАЛЬНОГО МАКЕТА
ТЕХНИЧЕСКОГО ОБЪЕКТА И МЕТОДА ИХ
ИНТЕГРАЦИИ
Н.Н. Войт16, С.И. Бочков17
Технология виртуальной реальности (VR) в современном
проектировании является одним из эффективных инструментов
решения задач при разработке продукта: прототипирование,
моделирование, модификация продукта. Для достижения
наибольшего эффекта требуется формализация компонентов
продуктов и методов их комбинирования. В статье авторы
предлагают метод интеграции таких артефактов технических
объектов, как интерфейс и поведение, в виртуальный макет.
Введение
В настоящее время большинство промышленных предприятий [1-4]
успешно используют технологию виртуальной реальности (VR) для
решения множества задач: обучение и переподготовка персонала на
рабочем месте, моделирование собираемых изделий и производственных
линий, сложные физические процессы, происходящие внутри изделий.
Технология виртуальной реальности используется на протяжении
всего жизненного цикла продукта: от этапов проектирования, выявления
ошибок, проверки эргономики до организации производственного
процесса, разработки процессов технического обслуживания, ремонта и
модернизации [5].
В производстве она широко используется для моделирования
установки нового оборудования одновременно с проектированием
производственной линии. Параллельно появляется возможность обучать
будущих операторов проектируемого оборудования на VR-прототипах.
68
Демонстрация будущего продукта клиентам ещё до начала
производства с помощью виртуальной реальности позволяет заказчику
увидеть предмет в натуральную величину и оценить его эргономические
характеристики.
Организация проектных процедур в
автоматизированном проектировании в виртуальной
реальности
Процесс проектирования сложного технического объекта (СТО) в
виртуальной реальности состоит из следующих этапов. На основе данных
о его внешнем виде создаётся интерфейс СТО, причём для создания
компонентов интерфейса СТО используется графическая библиотека
(графический репозиторий), содержащая двумерные и трёхмерные
изображения компонентов. С помощью параметров и функциональных
режимов формируется поведение СТО, выражаемое, например, в форме
конечного автомата. Интерфейс и поведение СТО преобразуются в
виртуальный макет, далее подробно описывается обработка
пользовательских действий на макете, который, в свою очередь,
преобразуется в виртуальный прототип и становится пригодным для
испытания в виртуальном пространстве, оценки эргономических
характеристик, обучения и переподготовки персонала.
Этот процесс отображён на IDEF0-схеме на рис. 1.
Разработка
интерфейса
Разработка модели
поведения
Генерация
виртуального макета
Интерфейс
Расширенный
конечный автомат
Проектирование
обработчиков
пользовательских действий
Виртуальный макет
Конструкторская документация
Система
виртуального макетирования
Система
виртуального макетирования
Система
виртуального макетирования
Тестирование
виртуального
прототипа
Виртуальный
прототип
Графическая
библиотека
(репозиторий)
Внешний вид
технического
объекта
Параметры
технического
объекта
Система
виртуального
прототипирования
Рис.1. Организация проектирования в виртуальной реальности
Поскольку данный процесс предполагает обширное количество
моделей и методов, в данной статье рассматриваются подпроцессы
разработки интерфейса, поведения и их интеграции в виртуальный макет.
69
Модели интерфейса и описания поведения СТО
Согласно ГОСТ 27.002-2015, техническим объектом является
сборочное изделие, устройство, аппаратные и программные средства [6]. В
данной статье к техническим объектам будем относить устройства,
оснащённые органами управления, в частности, контрольноизмерительные приборы.
Интерфейс виртуального макета состоит из следующих компонентов.
• контроллер – элемент внешнего вида, с помощью которых
оператор совершает воздействия на технический объект и изменяет
его состояние;
• индикатор – элемент внешнего вида, состояние которых
изменяется по внешнему сигналу или воздействию оператора на
контроллеры;
• блок – совокупность индикаторов и контроллеров, объединённых
по функциональному или другим признакам. Блок может
содержать вложенные блоки (подблоки), которые, в свою очередь,
также могут содержать подблоки.
Таким образом, модель интерфейса виртуального макета технического
объекта имеет вид:
𝐼 = (𝐶𝑡𝑟𝑙𝑠,𝐼𝑛𝑑𝑠, 𝐵𝑙𝑜𝑐𝑘𝑠),
где 𝐶𝑡𝑟𝑙𝑠 – множество контроллеров, 𝐼𝑛𝑑𝑠 – множество индикаторов,
𝐵𝑙𝑜𝑐𝑘𝑠 – множество блоков.
Контроллер 𝑐𝑡𝑟𝑙 ∈ 𝐶𝑡𝑟𝑙𝑠 имеет вид 𝑐𝑡𝑟𝑙 =
(𝑁𝑎𝑚𝑒,𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛, 𝑃𝑟𝑒𝑓𝑎𝑏, 𝑃𝑜𝑠, 𝑅𝑜𝑡), где 𝑁𝑎𝑚𝑒 – имя контроллера,
𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛 – описание контроллера, 𝑃𝑟𝑒𝑓𝑎𝑏 – трёхмерная модель
контроллера с настроенными текстурами, 𝑃𝑜𝑠 =< 𝑥, 𝑦, 𝑧 > – центральная
точка модели контроллера на виртуальном макете, 𝑅𝑜𝑡 =< 𝛼, 𝛽, 𝛾 > – угол
поворота модели контроллера.
Индикатор 𝑖𝑛𝑑 ∈ 𝐼𝑛𝑑𝑠 имеет вид 𝑖𝑛𝑑 =
(𝑁𝑎𝑚𝑒,𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛, 𝑃𝑟𝑒𝑓𝑎𝑏, 𝑃𝑜𝑠, 𝑅𝑜𝑡), где 𝑁𝑎𝑚𝑒 – имя индикатора,
𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛 – описание индикатора, 𝑃𝑟𝑒𝑓𝑎𝑏 – трёхмерная модель
индикатора с настроенными текстурами, 𝑃𝑜𝑠 =< 𝑥, 𝑦, 𝑧 > – центральная
точка модели индикатора на виртуальном макете, 𝑅𝑜𝑡 =< 𝛼, 𝛽, 𝛾 > – угол
поворота модели индикатора.
Блок 𝑏𝑙𝑜𝑐𝑘 ∈ 𝐵𝑙𝑜𝑐𝑘𝑠 имеет вид 𝑏𝑙𝑜𝑐𝑘𝑖 = (𝑐𝑡𝑟𝑙𝑠𝑖
, 𝑖𝑛𝑑𝑠𝑖
, 𝑏𝑙𝑜𝑐𝑘𝑠𝑖
′ ), где
𝑐𝑡𝑟𝑙𝑠𝑖 ⊂ 𝐶𝑡𝑟𝑙𝑠 – подмножество контроллеров, непосредственно входящих
в блок, 𝑖𝑛𝑑𝑠𝑖 ⊂ 𝐼𝑛𝑑𝑠 – подмножество индикаторов, непосредственно
входящих в блок, 𝑏𝑙𝑜𝑐𝑘𝑠𝑖
′ ⊂ 𝐵𝑙𝑜𝑐𝑘𝑠\𝑏𝑙𝑜𝑐𝑘𝑖 – подмножество блоков,
непосредственно входящих в блок.
70
Для наиболее полного описания поведения предлагается использовать
конечный автомат.
Внешними событиями изменяют текущее состояние автомата и
характеризуются входными сигналами автомата.
Внутренние события происходят внутри того или иного состояния, при
этом текущее состояние автомата не изменяется.
Опишем модель поведения с помощью расширенного конечного
автомата (РКА) в следующем виде [8]:
𝐴 = (𝑆, 𝑋, 𝑆0, 𝐶, 𝑇𝑇, 𝐹𝑠𝑡𝑎𝑟𝑡),
где:
• 𝑆 = {𝑆𝑖
, 𝑖 ∈ ℕ} – множество состояний, 𝑆𝑖 = (𝑁𝑎𝑚𝑒𝑖
,𝐼𝑋𝑖
, 𝑅𝑖), причём:
─ 𝑁𝑎𝑚𝑒 – имя состояния,
─ 𝐼𝑋 – внутренние события,
─ 𝑅 = {𝑅𝑖
|𝑖 ∈ ℕ} – непустое множество областей (регионов).
• 𝑋 – множество внешних событий,
• 𝐶 – множество условий выполнения переходов,
• 𝑆0 – начальное состояние РКА,
• 𝑇𝑇 = {𝑡𝑖
|𝑖 ∈ ℕ} – таблица переходов, 𝑡𝑖 =
(𝑠𝑟𝑐, 𝑑𝑠𝑡, 𝑥, 𝑐𝑜𝑛𝑑), 𝑠𝑟𝑐, 𝑑𝑠𝑡 ∈ 𝑆
∗
, 𝑥 ∈ 𝑋, 𝑐𝑜𝑛𝑑 ∈ 𝐶 ∪ ∅.
Областью, или регионом, называется часть РКА, которая может
рассматриваться как отдельный автомат. Область 𝑅𝑖 имеет вид 𝑅𝑖 =
(𝑁𝑎𝑚𝑒, 𝑆, 𝑆0), где 𝑁𝑎𝑚𝑒 – имя области, S – множество состояний,
непосредственно входящих в данную область, 𝑆0 – начальное состояние
области, 𝑆0 ∈ 𝑆.
Внутреннее событие 𝐼𝑋 имеет вид 𝐼𝑋 =
(𝑆𝑖𝑔𝑛𝑎𝑙, 𝐹𝑢𝑛𝑐𝑡𝑖𝑜𝑛, 𝐴𝑟𝑔𝑢𝑚𝑒𝑛𝑡𝑠), где 𝑆𝑖𝑔𝑛𝑎𝑙 – название события, 𝐹𝑢𝑛𝑐𝑡𝑖𝑜𝑛
– функция-обработчик события, 𝐴𝑟𝑔𝑢𝑚𝑒𝑛𝑡𝑠 – аргументы функцииобработчика.
Если |𝑅| = 1, такое состояние назовём простым, иначе – сложным.
Определим функцию 𝑝𝑎𝑟𝑒𝑛𝑡: 𝑆 → 𝑆, принимающую в качестве
аргумента дочернее состояние 𝑠𝑐ℎ𝑖𝑙𝑑 и возвращающую родительское
состояние 𝑠𝑝𝑎𝑟𝑒𝑛𝑡 , то есть ∃𝑠𝑝𝑎𝑟𝑒𝑛𝑡, 𝑟|𝑟 ∈ 𝑠𝑝𝑎𝑟𝑒𝑛𝑡 ∩ 𝑠𝑐ℎ𝑖𝑙𝑑 ∈ 𝑟; если 𝑠𝑐ℎ𝑖𝑙𝑑 не
имеет родительского состояния, функция возвращает 𝐴.
Виртуальный макет и метод интеграции
Макетом [6] называется изделие, являющееся изображением
проектного решения в установленном масштабе, которое собирается из
темплетов или моделей.
71
Трёхмерным макетом [6] называется изделие, являющееся
упрощённым изображением проектного решения в установленном
масштабе, которое собирается из моделей.
В исследуемой предметной области рассматриваются трёхмерные
макеты в виртуальной реальности, моделирующие функциональные
переходы между состояниями изделия без их внутреннего описания,
которые будем называть виртуальными макетами (ВМ).
Ниже представлено логико-алгебраическое описание виртуального
макета [9]:
𝑉𝑀 = (𝐶𝑡𝑟𝑙𝑠,𝐼𝑛𝑑𝑠, 𝐹𝑢𝑛𝑐𝑡𝑖𝑜𝑛𝑠, 𝐸𝑣𝑒𝑛𝑡𝑠, 𝑀𝑜𝑑𝑒𝑠, 𝑆𝑡𝑎𝑟𝑡𝑀𝑜𝑑𝑒),
где:
• 𝐶𝑡𝑟𝑙𝑠 = {𝑐𝑡𝑟𝑙𝑖
|𝑖 ∈ ℕ} – множество контроллеров, причём 𝑐𝑡𝑟𝑙 =
(𝑁𝑎𝑚𝑒,𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛, 𝑃𝑟𝑒𝑓𝑎𝑏, 𝑃𝑜𝑠, 𝑅𝑜𝑡), где 𝑁𝑎𝑚𝑒 – имя
контроллера, 𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛 – описание контроллера, 𝑃𝑟𝑒𝑓𝑎𝑏 –
трёхмерная модель контроллера с настроенными текстурами, 𝑃𝑜𝑠 =
< 𝑥, 𝑦, 𝑧 > – центральная точка модели контроллера на виртуальном
макете, 𝑅𝑜𝑡 =< 𝛼, 𝛽, 𝛾 > – угол поворота модели контроллера;
• 𝐼𝑛𝑑𝑠 = {𝑖𝑛𝑑𝑖
|𝑖 ∈ ℕ} – множество индикаторов, причём 𝑖𝑛𝑑 =
(𝑁𝑎𝑚𝑒,𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛, 𝑃𝑟𝑒𝑓𝑎𝑏, 𝑃𝑜𝑠, 𝑅𝑜𝑡), где 𝑁𝑎𝑚𝑒 – имя индикатора,
𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛 – описание индикатора, 𝑃𝑟𝑒𝑓𝑎𝑏 – трёхмерная модель
индикатора с настроенными текстурами, 𝑃𝑜𝑠 =< 𝑥, 𝑦, 𝑧 > –
центральная точка модели индикатора на виртуальном макете, 𝑅𝑜𝑡 =
< 𝛼, 𝛽, 𝛾 > – угол поворота модели индикатора;
• 𝐹𝑢𝑛𝑐𝑡𝑖𝑜𝑛𝑠 = {𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛𝑖
|𝑖 ∈ ℕ} – множество функций;
• 𝐸𝑣𝑒𝑛𝑡𝑠 = {список событий} – множество событий, произведённых
оператором;
• 𝑀𝑜𝑑𝑒𝑠 = {𝑚𝑜𝑑𝑒𝑖
|𝑖 ∈ ℕ} – множество режимов работы виртуального
макета, причём 𝑚𝑜𝑑𝑒𝑖 = (𝑁𝑎𝑚𝑒𝑖
, 𝑃𝑎𝑟𝑎𝑚𝑒𝑡𝑒𝑟𝑠𝑖), где:
─ 𝑁𝑎𝑚𝑒𝑖 – название режима;
─ 𝑃𝑎𝑟𝑎𝑚𝑒𝑡𝑒𝑟𝑠𝑖 = ({𝑃𝑎𝑟𝑖𝑗,𝑗 ∈ ℕ}) – множество параметров режима,
𝑃𝑎𝑟𝑖𝑗 = (𝑁𝑎𝑚𝑒𝑖𝑗, 𝑉𝑎𝑙𝑢𝑒𝑠𝑖𝑗, С𝑢𝑟𝑟𝑒𝑛𝑡𝑉𝑎𝑙𝑢𝑒𝑖𝑗)
• 𝑆𝑡𝑎𝑟𝑡𝑀𝑜𝑑𝑒 – исходный режим работы виртуального макета,
𝑆𝑡𝑎𝑟𝑡𝑀𝑜𝑑𝑒 ∈ 𝑀𝑜𝑑𝑒𝑠.
Функции моделируют переходы между состояниями или значениями
параметров одного состояния и имеют следующий вид:
𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛 = (𝑠𝑟𝑐, 𝑑𝑠𝑡, 𝑐𝑡𝑟𝑙, 𝑒𝑣𝑒𝑛𝑡),
где:
• 𝑠𝑟𝑐 – режим-источник, 𝑠𝑟𝑐 ∈ 𝑀𝑜𝑑𝑒𝑠;
72
• 𝑑𝑠𝑡 – режим-назначение, 𝑑𝑠𝑡 ∈ 𝑀𝑜𝑑𝑒𝑠;
• 𝑐𝑡𝑟𝑙 – контроллер, 𝑐𝑡𝑟𝑙 ∈ 𝐶𝑡𝑟𝑙𝑠;
• 𝑒𝑣𝑒𝑛𝑡 – тип события, 𝑒𝑣𝑒𝑛𝑡 ∈ 𝐸𝑣𝑒𝑛𝑡𝑠.
Метод интеграции состоит из трёх проектных процедур, приведённых
ниже.
Процедура копирования состояний в 𝑽𝑴
Перед копированием состояний создадим стек 𝑆𝑇𝐴𝐶𝐾 = {𝑐𝑜𝑛𝑡𝑒𝑥𝑡𝑖
|𝑖 ∈
ℕ}, хранящий контекст алгоритма, 𝑐𝑜𝑛𝑡𝑒𝑥𝑡𝑖 = (𝑣𝑎𝑙𝑢𝑒𝑠).
1. Создать переменную-счётчик 𝑖 и присвоить ей значение 0.
2. Создать режим 𝑀𝑜𝑑𝑒’.
3. Присвоить 𝑀𝑜𝑑𝑒
′
[𝑁𝑎𝑚𝑒] = 𝐴[𝑆𝑖
][𝑁𝑎𝑚𝑒].
4. Создать пустое множество значений параметров 𝑃𝑎𝑟𝑎𝑚𝑠
′ = ∅.
5. Если |𝐴[𝑆𝑖
][𝑅]| = 0, извлечь из него элемент и присвоить в 𝐴[𝑆𝑖
].
6. Если 𝐴[𝑆𝑖
] = ∅, перейти к шагу 14.
7. Создать переменную-счётчик 𝑗 и присвоить ей значение 0.
8. Создать пустое множество значений параметров 𝑆𝑢𝑏𝑝𝑎𝑟𝑎𝑚𝑠′.
9. Создать переменную-счётчик 𝑘 и присвоить ей значение 0.
10. Создать контекст c𝑜𝑛𝑡𝑒𝑥𝑡𝑖 = (𝐴[𝑆𝑖
][𝑅𝑗
][𝑆]) и поместить его в 𝑆𝑇𝐴𝐶𝐾.
11. Присвоить 𝐴[𝑆𝑖
] = 𝐴[𝑆𝑖
][𝑅𝑗
][𝑆𝑘
].
12. Перейти к шагу 2.
13. Добавить {𝐴[𝑆𝑖
][𝑅𝑗
][𝑆𝑘
][𝑁𝑎𝑚𝑒],𝐴[𝑆𝑖
][𝑅𝑗
][𝑆𝑘
][𝑉𝑎𝑙𝑢𝑒𝑠]} в S𝑢𝑏𝑝𝑎𝑟𝑎𝑚𝑠.
14. Увеличить 𝑘 на 1.
15. Если 𝑘 ≠ |𝐴[𝑆𝑖
][𝑅𝑗
]|, перейти к шагу 10.
16. Добавить {𝐴[𝑆𝑖
][𝑅𝑗
][𝑁𝑎𝑚𝑒], 𝑆𝑢𝑏𝑝𝑎𝑟𝑎𝑚𝑠
′
, 𝑣𝑎𝑙𝑢𝑒|𝑣𝑎𝑙𝑢𝑒 ∈
𝑆𝑢𝑏𝑝𝑎𝑟𝑎𝑚𝑠
′ ∩ 𝑣𝑎𝑙𝑢𝑒[𝑁𝑎𝑚𝑒] = 𝐴[𝑆𝑖
][𝑅𝑗
][𝑆0][𝑁𝑎𝑚𝑒]} в 𝑃𝑎𝑟𝑎𝑚𝑠
′
.
17. Увеличить 𝑗 на 1.
18. Если 𝑗 ≠ |𝐴[𝑆𝑖
][𝑅]|, перейти к шагу 7.
19. Присвоить 𝑀𝑜𝑑𝑒
′
[𝑃𝑎𝑟𝑎𝑚𝑒𝑡𝑒𝑟𝑠] = 𝑃𝑎𝑟𝑎𝑚𝑠′.
20. Добавить 𝑀𝑜𝑑𝑒′ в 𝑉𝑀[𝑀𝑜𝑑𝑒𝑠].
21. Увеличить 𝑖 на 1.
22. Если 𝑖 ≠ |𝐴[𝑆]|, вернуться к шагу 2.
23. Присвоить 𝑆𝑡𝑎𝑟𝑡𝑀𝑜𝑑𝑒 = 𝑚𝑜𝑑𝑒|𝑚𝑜𝑑𝑒 ∈ 𝑉𝑀[𝑀𝑜𝑑𝑒𝑠] ∩
𝑚𝑜𝑑𝑒[𝑁𝑎𝑚𝑒] = 𝐴[𝑆0][𝑁𝑎𝑚𝑒].
24. Конец.
Процедура копирования интерфейса в 𝑽𝑴
1. Создать переменную-счётчик 𝑖 и присвоить ей значение 0.
2. Добавить {𝐼[𝐶𝑡𝑟𝑙𝑠𝑖
][𝑁𝑎𝑚𝑒],𝐼[𝐶𝑡𝑟𝑙𝑠𝑖
][𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛],𝐼[𝐶𝑡𝑟𝑙𝑠𝑖
][𝑃𝑟𝑒𝑓𝑎𝑏],
𝐼[𝐶𝑡𝑟𝑙𝑠𝑖
][𝑃𝑜𝑠],𝐼[𝐶𝑡𝑟𝑙𝑠𝑖
][𝑁𝑎𝑚𝑒]} в 𝑉𝑀[𝐶𝑡𝑟𝑙𝑠].
3. Увеличить 𝑖 на 1.
4. Если 𝑖 ≠ |𝐼[𝐶𝑡𝑟𝑙𝑠]|, вернуться к шагу 2.
5. Присвоить 𝑖 = 0.
6. Добавить {𝐼[𝐼𝑛𝑑𝑠𝑖
][𝑁𝑎𝑚𝑒],𝐼[𝐼𝑛𝑑𝑠𝑖
][𝐷𝑒𝑠𝑐𝑟𝑖𝑝𝑡𝑖𝑜𝑛],𝐼[𝐼𝑛𝑑𝑠𝑖
][𝑃𝑟𝑒𝑓𝑎𝑏],
𝐼[𝐼𝑛𝑑𝑠𝑖
][𝑃𝑜𝑠],𝐼[𝐼𝑛𝑑𝑠𝑖
][𝑁𝑎𝑚𝑒]} в 𝑉𝑀[𝐶𝑡𝑟𝑙𝑠].
73
7. Увеличить 𝑖 на 1.
8. Если 𝑖 ≠ |𝐼[𝐼𝑛𝑑𝑠]|, вернуться к шагу 6.
9. Если |𝐼[𝐵𝑙𝑜𝑐𝑘𝑠]| = 0, перейти к шагу 14.
10. Присвоить 𝑖 = 0.
11. Присвоить 𝐼 = 𝐼[𝐵𝑙𝑜𝑐𝑘𝑠𝑖
] и перейти к шагу 1.
12. Увеличить 𝑖 на 1.
13. Если 𝑖 ≠ |𝐼[𝐵𝑙𝑜𝑐𝑘𝑠]|, вернуться к шагу 2.
14. Конец.
Процедура копирования переходов в 𝑽𝑴
1. Создать переменную-счётчик 𝑖 и присвоить ей значение 0.
2. Создать функцию 𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛′.
3. Присвоить 𝑠𝑟𝑐 = 𝑚𝑜𝑑𝑒|𝑚𝑜𝑑𝑒 ∈ 𝑀𝑜𝑑𝑒𝑠 ∩ 𝑚𝑜𝑑𝑒[𝑁𝑎𝑚𝑒] = 𝐴[𝑡][𝑠𝑟𝑐].
4. Присвоить 𝑑𝑠𝑡 = 𝑚𝑜𝑑𝑒|𝑚𝑜𝑑𝑒 ∈ 𝑀𝑜𝑑𝑒𝑠 ∩ 𝑚𝑜𝑑𝑒[𝑁𝑎𝑚𝑒] = 𝐴[𝑡][𝑑𝑠𝑡].
5. Присвоить 𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛′
[𝑠𝑟𝑐] = 𝑠𝑟𝑐, 𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛′
[𝑑𝑠𝑡] = 𝑑𝑠𝑡.
6. Добавить 𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛’ в 𝑉𝑀[𝐹𝑢𝑛𝑐𝑡𝑖𝑜𝑛𝑠].
7. Увеличить 𝑖 на 1.
8. Если 𝑖 ≠ |𝐴[𝑇𝑇]|, вернуться к шагу 2.
9. Конец.
Заключение
Авторами разработан метод интеграции моделей компонентов СТО –
интерфейса и поведения – в виртуальный макет. Данный метод отличается
тем, что интерфейс и поведение виртуального макета первоначально не
зависят друг от друга.
Разработанный метод является универсальным относительно
аппаратного обеспечения. Его можно использовать для решения
различных прикладных задач с применением технологии виртуальной
реальности, в том числе для создания функционирующих изделий в
виртуальной реальности – виртуальных прототипов.
Исследование выполнено при финансовой поддержке РФФИ и
Ульяновской области в рамках научного проекта № 18-47-730032.
Список литературы
1. Agile Business Process Development: Why, How and When - Applying Nonaka's
theory of knowledge transformation to business process development. Information
Systems and e-Business Management, 14, 4, (Nov. 2014), 693-731.
DOI=https://doi.org/10.1007/s10257-014-0256-1
2. Sherehiy B., W., K. & J.K., L., 2007. A review of enterprise agility: Concepts,
frameworks, and attributes. International Journal of Industrial Ergonomics, vol. 37,
pp. 445-460.
3. A global Swiss company offering advanced intelligent application software for
multiple business sectors. http://whitestein.com/
4. Abidi, M.-A., Lyonnet, B., Chevaillier, P., Toscano, R., Baert, P. Simulation of
manufacturing processes via Virtual Reality. Virtual and Augmented Reality:
74
Concepts, Methodologies, Tools, and Applications, 918-953 (2018).
https://doi.org/10.4018/978-1-5225-5469-1.ch044
5. Connect WIT, №10, 2019, режим доступа: https://www.connect-wit.ru/wpcontent/uploads/2019/12/01_84_Connect_10_2019_Sm.pdf (дата доступа:
25.11.2021).
6. ГОСТ 27.002-2015. Надежность в технике. Термины и определения.
7. ГОСТ Р 2.002-2019. Единая система конструкторской документации.
Требования к моделям, макетам и темплетам, применяемые при
проектировании.
8. Войт Н.Н., Бочков С.И. Исследование методов генерации тестов в
диаграмматическом базисе языка UML. ИНФОРМАТИКА,
МОДЕЛИРОВАНИЕ, АВТОМАТИЗАЦИЯ ПРОЕКТИРОВАНИЯ (ИМАП2020) XII Международная научно-практическая конференция студентов,
аспирантов и молодых ученых: сборник научных трудов. Ульяновск, 2021, с.
36-43.
9. Voit N.N., Bochkov S.I. (2021) Method to Convert UML State Chart Diagram to
the Virtual Object Mock-Up. In: Gervasi O. et al. (eds) Computational Science and
Its Applications – ICCSA 2021. ICCSA 2021. Lecture Notes in Computer Science,
vol 12957. Springer, Cham.